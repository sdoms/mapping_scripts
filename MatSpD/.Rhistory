install.packages("timevis")
library(timevis)
data <- data.frame(
id      = 1:4,
content = c("Item one"  , "Item two"  ,"Ranged item", "Item four"),
start   = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),
end     = c(NA          ,           NA, "2016-02-04", NA)
)
timevis(data)
View(data)
library(readxl)
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx")
View(timeline)
timevis(timeline)
?timevis()
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx")
timevis(timeline)
groups <- timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx",sheet=2 )
View(groups)
groups <- timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx",sheet=2 )
timevis(data=timeline, groups = groups)
View(timeline)
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
groups <- timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx",sheet=2 )
timevis(data=timeline, groups = groups)
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
View(timeline)
timevis(data=timeline, groups = groups %>% setGroups(groups))
remotes::install_github("giocomai/ganttrify")
timevis(data=timeline)
library(gantrrify)
remotes::install_github("giocomai/ganttrify")
library("ganttrify")
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
View(timeline)
ganttrify(project = ganttrify:timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ganttrify:timeline
knitr::kable(ganttrify::test_project_date_day)
knitr::kable(ganttrify::test_project_date_day)
knitr::kable(ganttrify::timeline)
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
install.packages("rlang")
install.packages("rlang")
library(readxl)
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE)
systemfonts::system_fonts()
extrafont::font_import()
install.packages("extrafont")
extrafont::font_import()
extrafont::font_import()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
month_number = FALSE,
font_family = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
knitr::kable(ganttrify::test_project_date_day)
ganttrify(project = ganttrify::test_project_date_day,
spots = ganttrify::test_spots_date_day,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
knitr::kable(ganttrify::test_project_date_day)
knitr::kable(timeline)
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
knitr::kable(timeline)
knitr::kable(ganttrify::test_project_date_day)
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
mark_quarters = TRUE,
font_family = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
timeline <- read_excel("~/Documents/PhD/Writing/Mapping paper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("GanttchartTimeline.pdf")
library(ggplot2)
ggsave("GanttchartTimeline.pdf")
pdf("TimelineGanttChart.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
pdf("~/Documents/PhD/Writing/Mapping paper/TimelineGanttChart.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
version(ggplot1)
install.packages(c("ade4", "afex", "ape", "bayesplot", "BEDMatrix", "bigassertr", "bigparallelr", "bigsnpr", "bigstatsr", "bigutilsr", "bit", "bit64", "boot", "bridgesampling", "brms", "broom", "calibrate", "car", "carData", "class", "covr", "cowplot", "crochet", "data.table", "dbplyr", "dendextend", "Deriv", "devtools", "DiagrammeR", "doBy", "emmeans", "fit.models", "forcats", "foreach", "fpc", "fs", "future", "gaston", "GGally", "ggpmisc", "ggpubr", "ggrepel", "git2r", "gmm", "gplots", "gtools", "haven", "Hmisc", "htmlTable", "httr", "huge", "igraph", "inline", "KernSmooth", "knitr", "lattice", "lavaan", "lme4", "lmerTest", "lmtest", "loo", "maptools", "MASS", "matrixStats", "mclust", "mcmc", "MCMCpack", "mgcv", "mnormt", "modelr", "modeltools", "mvtnorm", "NADA", "nlme", "nloptr", "nnet", "OpenMx", "openssl", "openxlsx", "optparse", "patchwork", "pbkrtest", "plotly", "pls", "plyr", "pscl", "qtl", "quantreg", "RcppArmadillo", "RcppParallel", "RCurl", "regress", "remotes", "reshape2", "rex", "rgexf", "RhpcBLASctl", "rmarkdown", "rmio", "robCompositions", "robust", "robustbase", "roxygen2", "rpf", "rrcov", "rstan", "rstantools", "rversions", "rvest", "shinyjs", "sp", "spatial", "StanHeaders", "stringi", "survival", "sys", "tinytex", "TSP", "usethis", "vcd", "VIM", "xfun", "xml2", "zCompositions", "zip"))
loadfonts()
library(extrafont)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
loadfonts()
pdf("~/Documents/PhD/Writing/Mapping paper/TimelineGanttChart.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
embed_fonts("~/Documents/PhD/Writing/Mapping paper/TimelineGanttChart.pdf", outfile="f~/Documents/PhD/Writing/Mapping paper/TimelineGanttChart_embed.pdf")
library(readxl)
timeline <- read_excel("~/Documents/PhD/Writing/MappingPaper/Timeline.xlsx", sheet=1)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
pdf("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
pdf("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
pdf("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
pdf("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", fonts = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
loadfonts()
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
pdf("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", fonts = "Roboto Condensed")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
dev.off()
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
library(extrafontdb)
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
library(ggplot2)
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", fonts = "Roboto Condensed")
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
install.packages("extrafontdb")
install.packages("extrafontdb")
library(readxl)
timeline <- read_excel("~/Documents/PhD/Writing/MappingPaper/Timeline.xlsx", sheet=1)
library(ggplot2)
#remotes::install_github("giocomai/ganttrify")
library("ganttrify")
library(extrafont)
loadfonts()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", fonts = "Roboto Condensed")
loadfonts()
font_install("Roboto Condensed")
fonts()
font_import("~/Library/Fonts/", recursive = TRUE)
font_import("~/Library/Fonts/", recursive = TRUE)
loadfonts()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
devtools::install_github('extrafont', 'wch')
fonttable()
font_import()
loadfonts()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
install.packages('showtext', dependencies = TRUE)
#install.packages('showtext', dependencies = TRUE)
library(showtext)
font_add_google("Roboto", "Roboto")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", type="cairo")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", device=cairo_pdf())
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Helvetica")
showtext_auto()
ganttrify(project = timeline,
by_date = TRUE,
exact_date = TRUE,
size_text_relative = 1.2,
month_number = FALSE,
font_family = "Roboto Condensed")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", device=cairo_pdf())
embed_fonts("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf", outfile="~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart_embed.pdf")
ggsave("~/Documents/PhD/Writing/MappingPaper/TimelineGanttChart.pdf")
setwd("~/Documents/PhD/Experiments/Final_QTL_mapping/Scripts/MatSpD/")
## Read in correlation matrix:
#corr.matrix<-read.table("correlation.matrix")
corr.matrix<-abs(read.table("correlation.matrix.txt"))      # For multiple test correction the sign of the correlation is irrelevant (i.e., so we're best to input absolute values)
## Remove Duplicate Columns:
corr.matrix.RemoveDupCol <- corr.matrix[!duplicated((corr.matrix))]
## Remove Duplicate Rows:
corr.matrix.RemoveDupRow <- unique((corr.matrix.RemoveDupCol))
## Remove Redundant VAR Names:
VARnames.NonRedundant<-as.matrix(dimnames(corr.matrix.RemoveDupCol)[[2]])
colnames(VARnames.NonRedundant)<-"VAR"
evals<-eigen(t(corr.matrix.RemoveDupRow),symmetric=T)$values
oldV<-var(evals)
M<-length(evals)
L<-(M-1)
Meffold<-M*(1-(L*oldV/M^2))
if (evals == 1) {
oldV <- 0
Meffold <- M
}
labelevals<-array(dim=M)
for(col in 1:M) { labelevals[col]<-c(col) }
levals<-cbind(labelevals, evals)
newevals<-evals
for(i in 1:length(newevals)) {
if(newevals[i] < 0) {
newevals[i] <- 0
}
}
newlevals<-cbind(labelevals, newevals)
newV<-var(newevals)
Meffnew<-M*(1-(L*newV/M^2))
if (evals == 1) {
newV <- 0
Meffnew <- M
}
IntLinewevals<-newevals
for(i in 1:length(IntLinewevals)) {
if(IntLinewevals[i] >= 1 ) {
IntLinewevals[i] <- 1
}
if(IntLinewevals[i] < 1 ) {
IntLinewevals[i] <- 0
}
}
NonIntLinewevals <- newevals-floor(newevals)
MeffLi <- sum(NonIntLinewevals+IntLinewevals)
NewResultLitemp1<-c('Effective Number of Independent Variables [VeffLi] (using Equation 5 of Li and Ji 2005):')
NewResultLitemp2<-round(MeffLi,dig=4)
NewResultLi1<-matrix(NewResultLitemp1)
NewResultLi2<-matrix(NewResultLitemp2)
NewBonferroniLitemp<-c('Experiment-wide Significance Threshold Required to Keep Type I Error Rate at 5%:',
' ', 1-(0.95^(1/MeffLi)))
NewBonferroniLi<-matrix(NewBonferroniLitemp)
Separatortemp<-c(' ',
'--------------------------------------------------------------------------------',
' ',                       ' ',
'USING THE MORE ACCURATE ESTIMATE OF THE Veff [VeffLi] PROPOSED BY LI AND JI (2005):')
Separator<-matrix(Separatortemp)
Messagetemp<-c(' ',
'NB: I recommend using the Li and Ji (2005) estimate unless Veff < VeffLi. ')
Message<-matrix(Messagetemp)
NewResulttemp<-c('Effective Number of Independent Variables [Veff] (-ve values set to zero):', round(Meffnew,dig=4))
NewBonferronitemp<-c('Experiment-wide Significance Threshold Required to Keep Type I Error Rate at 5%:', 1-(0.95^(1/Meffnew)))
NewEigenvaluestemp<-c('New Eigenvalues Associated with the Correlation Matrix:', round(newevals,dig=4))
NewVariancetemp<-c('Variance of the Eigenvalues (with -ve values set to zero):', round(newV,dig=4))
NewResult<-matrix(NewResulttemp)
NewBonferroni<-matrix(NewBonferronitemp)
NewEigenvalues<-matrix(NewEigenvaluestemp)
NewVariance<-matrix(NewVariancetemp)
Originaltemp<-c('Original (total) number of variables (V) after removing redundant (collinear) variables:',
' ', M)
OldEigenvalues1temp<-c(' ',
'For factor 1 to V, original eigenvalues associated with the correlation matrix:')
OldEigenvalues2temp<-round(newlevals,dig=4)
OldVariancetemp<-c(' ',
'Variance of the observed eigenvalues:',
' ', round(newV,dig=4))
OldResulttemp<-c(' ',
'Effective number of independent variables [Veff]:',
' ', round(Meffnew,dig=4))
OldBonferronitemp<-c(' ',
'Significance threshold required to keep Type I error rate at 5% (0.05/Veff):',
' ', 0.05/Meffnew)
Original<-matrix(Originaltemp)
OldResult<-matrix(OldResulttemp)
OldBonferroni<-matrix(OldBonferronitemp)
OldEigenvalues1<-matrix(OldEigenvalues1temp)
OldEigenvalues2<-OldEigenvalues2temp
OldVariance<-matrix(OldVariancetemp)
no.dimnames <- function(a) {
## Remove all dimension names from an array for compact printing.
d <- list()
l <- 0
for(i in dim(a)) {
d[[l <- l + 1]] <- rep("", i)
}
dimnames(a) <- d
a
}
sink("matSpDlite.out")
print(no.dimnames(Original), quote=F)
print(no.dimnames(OldEigenvalues1), quote=F)
print(no.dimnames(OldEigenvalues2), quote=F)
print(no.dimnames(OldVariance), quote=F)
print(no.dimnames(OldResult), quote=F)
print(no.dimnames(OldBonferroni), quote=F)
print(no.dimnames(Separator), quote=F)
print(no.dimnames(NewResultLi1), quote=F)
print(no.dimnames(NewResultLi2), quote=F)
print(no.dimnames(NewBonferroniLi), quote=F)
print(no.dimnames(Message), quote=F)
sink()
Warningtemp<-c(' ',
'### Warning ###: there were some negative eigenvalues!',
'If the above results using negative eigenvalues are equivalent',
'to the following - obtained by setting negative eigenvalues to zero -',
'then the results should be fine.',
' ')
Warning<-matrix(Warningtemp)
if(any(evals < 0)) {
sink("matSpDlite.out")
print(no.dimnames(Original), quote=F)
print(no.dimnames(OldEigenvalues1), quote=F)
print(no.dimnames(OldEigenvalues2), quote=F)
print(no.dimnames(OldVariance), quote=F)
print(no.dimnames(OldResult), quote=F)
print(no.dimnames(OldBonferroni), quote=F)
print(no.dimnames(Separator), quote=F)
print(no.dimnames(NewResultLi1), quote=F)
print(no.dimnames(NewResultLi2), quote=F)
print(no.dimnames(NewBonferroniLi), quote=F)
print(no.dimnames(Message), quote=F)
sink()
}
load("/Users/doms/Documents/PhD/Experiments/Final_QTL_mapping/Cleaning_snps/clean_snps.Rdata")
View(snps)
